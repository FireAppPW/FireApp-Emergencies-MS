# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Build and Deploy to Azure Kubernetes Service

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      REPOSITORY_PREFIX: ${{ secrets.REPOSITORY_PREFIX }}
      AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
      AZURE_RESOUCE_GROUP: ${{ secrets.AZURE_RESOUCE_GROUP }}
      DATASOURCE_URL: ${{ secrets.AZURE_DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.AZURE_DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.AZURE_DATASOURCE_PASSWORD }}
      REPOSITORY_USERNAME: ${{ secrets.REPOSITORY_USERNAME }}
      REPOSITORY_PASSWORD: ${{ secrets.REPOSITORY_PASSWORD }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLUSTER_NAME: ${{ secrets.AZURE_CLUSTER_NAME }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REPOSITORY_PREFIX }}.azurecr.io
          username: ${{ env.REPOSITORY_USERNAME }}
          password: ${{ env.REPOSITORY_PASSWORD }}
      -
        name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          tags: ${{ env.REPOSITORY_PREFIX }}.azurecr.io/fireapp-emergency-ms:latest
          push: true
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AZURE_RESOUCE_GROUP }}
          cluster-name: ${{ env.AZURE_CLUSTER_NAME }}
          admin: true
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Update manifest file with env
        run: |
          ESCAPED_DATASOURCE_URL=$(echo $DATASOURCE_URL | sed 's/\//\\\//g')
          ESCAPED_DATASOURCE_USERNAME=$(echo $DATASOURCE_USERNAME | sed 's/\//\\\//g')
          ESCAPED_DATASOURCE_PASSWORD=$(echo $DATASOURCE_PASSWORD | sed 's/\//\\\//g')
          ESCAPED_REPOSITORY_PREFIX=$(echo $REPOSITORY_PREFIX | sed 's/\//\\\//g')
          sed -i "s/DATASOURCE_URL_ENV/"$ESCAPED_DATASOURCE_URL"/g" ./k8s/emergency-example-deployment.yaml
          sed -i "s/DATASOURCE_USERNAME_ENV/"$ESCAPED_DATASOURCE_USERNAME"/g" k8s/emergency-example-deployment.yaml
          sed -i "s/DATASOURCE_PASSWORD_ENV/"$ESCAPED_DATASOURCE_PASSWORD"/g" k8s/emergency-example-deployment.yaml
          sed -i "s/REPOSITORY_PREFIX_ENV/$ESCAPED_REPOSITORY_PREFIX/g" k8s/emergency-example-deployment.yaml
          cat k8s/emergency-example-deployment.yaml
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: default
          name: emergency-example
          manifests: |
            k8s/namespace.yaml
            k8s/init-services/emergency-example.yaml
            k8s/emergency-example-deployment.yaml
          images: ${{ env.REPOSITORY_PREFIX }}.azurecr.io/fireapp-emergency-ms:latest
          pull-images: false 
